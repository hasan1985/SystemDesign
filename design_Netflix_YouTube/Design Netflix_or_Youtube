Design Netflix_or_Youtube

Requirements -
1. Watch videos
2. Upload videos
3. Search videos
4. Like/Dislike
5. Comment
6. Personalized dashboard based on history + infinite scrolling.

Capacity Estimate
Let's assume -
1. 1 Billion (10^9) registered users
2. 100 Million (100 * 10^6) daily users
3. 10 watch per user per day
	=> (10*100*10^6) = 10^9 watch per day
	=> 10^9 / 86400 = 11574 ~ 12000 watch per sec
4. 10 search or comment or like/dislike per user per day ~ 12000 search per sec 
5. upload to view ratio 1:100
	=> 10^9 / 100 = 10^7 upload per day
	=> 12000 / 100 = 120 upload per sec
6. Assume on avg 1 video == 1HR.
   1 min of video == 10MB in 1 formate. 
   There will be 10 different formates or resolutions
	=> 1 video in 1 formate = 600MB
	=> 1 video in 10 formates = 6000MB ~ 6GB.

Bandwidth Estimate -
1. 12K views per sec, on avg each file is 600MB (in 1 formate)
	=> (12K * 600MB) = 7200000MB = 7.2TB of data downloaded
	=> 7.2TB/Sec outgoing bandwidth.
2. 120 upload per sec, on avg each file is 600MB (estimate)
	=> (120 * 600MB) = 72000MB = 72GB of data uploaded
	=> 72BG/Sec of incoming bandwidth
3. Each upload will trigger to produce 10 formate
	=> 720GB/Sec of data processing bandwidth

Storage estimate - 
1. We have 10^7 upload per day.
	=> 10^7 * 30 * 6GB = 1800PB per month of storage.

UI Design -
	* horizontal scrolling for different genre

System APIs - 
... Do it later

High Level Design
1. User Database for name, email, id, pass.
2. Video processing system
	* Processing Queues to store uploaded unprocessed videos.
	* Processors or workers those will read from queue asynchronously to do further process.
	* Encoder to generate different formate
	* Notification service to notify user when upload is done
3. Storage for video meta data.
4. Storage for video thumbnail and the video files.
5. Storage for comments

Video storage - 
HDFS or GlusterFS to store video

User dashboard and search
	*

Steaming system or read traffic
	* Use open source media library like shaka-player

Upload system or write traffic
	* 



Stuff to know - 

File or video upload client side
	* need to read

File or video upload server side
	*

Client side code for media streaming -
	* https://medium.com/canal-tech/how-video-streaming-works-on-the-web-an-introduction-7919739f7e1
	video steaming receiver plugins - 
		* https://github.com/google/shaka-player
		* https://shaka-player-demo.appspot.com/docs/api/tutorial-basic-usage.html

Server Side code for media streaming- 
	* not sure, how the segmentation works.
	* didn't understand - https://stackoverflow.com/questions/11343523/video-streaming-in-vlcj/11347526#11347526

Possibliy related knowladge
Steaming protocol - https://www.wowza.com/blog/streaming-protocols
	* https://www.quora.com/What-technologies-should-I-use-to-build-a-video-streaming-website-like-Netflix-from-scratch-using-Java/answer/Ashley-John-29
	* https://www.quora.com/profile/Ashley-John-29
	* HTTP Live Steaming HLS - https://www.wowza.com/blog/hls-streaming-protocol
	* https://www.quora.com/Which-streaming-protocol-does-Youtube-use
	* https://www.linkedin.com/pulse/basics-how-video-streaming-works-ashish-deshmukh/
	* https://www.sciencedirect.com/topics/computer-science/video-streaming
	* https://www.quora.com/What-protocol-does-Netflix-use-for-streaming
	* https://www.quora.com/What-is-the-reason-behind-Youtube-using-TCP-and-not-UDP

Learn about TCP vs UDP
https://www.quora.com/Does-video-streaming-use-TCP-or-UDP






