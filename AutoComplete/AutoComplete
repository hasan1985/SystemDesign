AutoComplete

1. Requirements -
	* While user is typing to search, the system should suggest top 10 terms matching prefix with so far typed string.
	* 50ms wait after each key stroke to fire the query API.

2. Requirements Questions -
	* Should this suggestion list be different per user demographic, geo location, may be idividual user or current major event?

3. Underlying Systems - 
	* Let's think our system similar to google's search page where millions of search requested everyday. 
	* A distributed logging system logs each search.
	* A distribute Ranking system reads the log file
		* Ranks each term by let's say Frequency and a weight of recentness.
		* Produces list of fils containing terms with associated rank values.
		* These term-rank list files are distributed in multiple servers.
		* Each term is unique across all files all servers.
		* These term-rank list containing files are raw input for our AutoComplete System
		* If this Ranking system can provide term-rank list in lexicographically sorted order that good otherwise AutoComplete system will have to do it for its own.

4. Here comes our AutoComplete System - 

	1. A cluster of servers read given raw term-rank files and produce Sub-Ordered-Term-Rank file for each of these raw files.
		* Terms are lexicographically sorted within each Sub-Ordered-Term-Rank file.
		* Each Sub-Ordered-Term-Rank file data is published to a topic in a PUB/SUB system in order.

	2. Another Server reads chunks of data from all the topics and maintain a Min Heap to produce "Final-Ordered-Terms"
		* The chunk size can vary based on this server's capacity.
		* As long every topic has one representing chunk in this server then the Min Heap output will be sorted across all topics.
		* The "Final-Ordered-Terms" stream will be published to another topic for further processing.
		* This server can be SPOF, how to solve it -
			* We can have a cluster/series of such servers.
			* All the live servers in this cluster will be marked with a sequence number 1,2,3...n.
			* Each PUB/SUB topic must be subscribed by one and only one of these servers.
			* The nth Server's (n!=1) output will an input to the (n-1)th server.
			* The output of the 1st server (primary server) is the final stream of "Final-Ordered-Terms"
			* If a server goes down - 
				* We have to re-sequence the remaining servers.
				* The unattended topics needs to be subscribed by any remaining servers.

	3. We will have cluster or servers keeping a Trie datastructure in memory.
		* A Processor server will keep reading from "Final-Ordered-Terms" and start filling the 1st Trie server.
		* Once the 1st server is filled with a range of terms from the ordered term list it will be marked with that range, lets say (a-aaaxxy). Notice this 1st sever root has only one child 'a'
		* Then the processer will start filling terms in the 2nd server.
			* But it also may need to find some of these term's parent node from preceding server. 
			* For example for the term 'ab' be a child of "1st-server-root-a" node.
			* So this node should keep an entry pointing to remote node "2nd-server-root-ab".
			* So that during trie traversing it can traverse to its remote-child node in 2nd server.
			* In 2nd sever's root will have a child node mapped by "ab". 
			* Similarly term "b" (2nd-server-root-b) should also be a remote child of (1st-server-root).
			* Note that "abb" will find parent node in 2nd sever i.e. in local.
		* Once 2nd sever is filled at the end lets say its range is aaaxxy-bmno. 
		* While querying a term, leveraging these ranges we can directly go to the server and look up in trie, no need to hope from sever to server.
		* How these tries look -
			* It will be bunch of TrieNode in momory.
			* Each node will have
				* Map<Character, TrieNode> localChildren; // to travel down the tree using char from each positions
				* Map<Charecter, RemoteServerNodeInfo> remoteChildren; // to jump to remote child
				* boolean isEndOfTerm // flag to mark end of a term
				* int Rank; // rank value if end of term is true
				* TermRank[] topTenTermRanks;
				* String prifix; // current prefix may no be needed.
			* While building the trie topTenTermRanks will be empty;
			* Once all the tries in all multiple severs are built the processor will start counting "topTenTermRanks" for each server recursively from parent to child. In this process we may need to jump from on sever to another.
			* During query we will not need to server to server hope because using range as index we can directly go the server where the term will exist if it is at all. 
